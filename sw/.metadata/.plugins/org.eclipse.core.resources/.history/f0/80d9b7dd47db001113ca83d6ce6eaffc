/*
 * low_level_op.c
 *
 *  Created on: Apr 2, 2012
 *      Author: lucas.russo
 */

#include "low_level_op.h"
#include "common.h"
#include "xparameters.h"

/* align the buffer to 16-byte boundary. DMA engine requires this for DDC samples */
u32 dma_buf[MAX_DMA_TRANSFER_SIZE/4] __attribute__((aligned(16)));

/* DMA control structutes */
struct low_level_attr ddc_dma_attr = {
	.sample_size = DDC_SAMPLE_SIZE,
	.mem_start_addr = (char *) DDR3_DMA_DDC_BUFFER,
	.mem_size = MAX_DMA_TRANSFER_SIZE,
	.max_resp_buffer_packets = RESPONSE_PACKET_MAX_DDC_SAMPLES
};

struct low_level_attr fmc150_adc_dma_attr = {
	.sample_size = ADC_SAMPLE_SIZE,
	.mem_start_addr = (char *) DDR3_DMA_ADC_BUFFER,
	.mem_size = MAX_DMA_TRANSFER_SIZE,
	.max_resp_buffer_packets = RESPONSE_PACKET_MAX_ADC_SAMPLES
};

/* samples_count and samples_count_pos should not be visible to the other layer! FIX this*/
struct low_level_handler ddc_low_level_handler = {
	.id = DDC_ID,
	.baseaddr = (char *)BPM_DDC_BASEADDR,				/* capture_ctl register within BPM DDC pcore */
	.attr = &ddc_dma_attr,
	.samples_count = 0,
	.samples_count_pos = 0
};

/* samples_count and samples_count_pos should not be visible to the other layer! FIX this*/
struct low_level_handler fmc150_adc_low_level_handler = {
	.id = ADC_ID,
	.baseaddr = ((char *)FMC150_BASEADDR + 0x020),		/* capture_ctl register within FMC150 pcore */
	.attr = &fmc150_adc_dma_attr,
	.samples_count = 0,
	.samples_count_pos = 0
};

/* Specific command attribute structutes */
const struct command_attr fmc150_comm_attr = {
	.max_samples = MAX_ADC_SAMPLES_COUNT,
	.sample_size = ADC_SAMPLE_SIZE,
};

const struct command_attr ddc_comm_attr = {
	.max_samples = MAX_DDC_SAMPLES_COUNT,
	.sample_size = DDC_SAMPLE_SIZE,
};

const struct command_attr fmc150_ddc_comm_attr = {
	.max_samples = MAX_ADC_DDC_SAMPLES_COUNT,
	.sample_size = ADC_DDC_SAMPLE_SIZE,
};

/* Dummy structure */
const struct command_attr soft_reg_attr{
	.max_samples = 0,
	.sample_size = 0,
};

/* This structure is not used for the led command. Just fill with zeros */
const struct command_attr led_comm_attr = {
	.max_samples = 0,
	.sample_size = 0,
};

/* Specific command operations */
const struct command_ops fmc150_comm_ops = {
	.capture_samples = capture_samples,
	.get_samples = get_samples,
	.read_reg = read_fmc150_register,
	.write_reg = write_fmc150_register
};

/* Caution with the null pointer function */
const struct command_ops ddc_comm_ops = {
	.capture_samples = capture_samples,
	.get_samples = get_samples,
	.read_reg =  NULL,
	.write_reg =  NULL
};

const struct command_ops soft_reg_ops = {
	.capture_samples = NULL,
	.get_samples = NULL,
	.read_reg =  NULL,
	.write_reg =  NULL
};

const struct command_ops led_comm_ops = {
	.capture_samples = NULL,
	.get_samples = NULL,
	.read_reg = read_soft_register,
	.write_reg = write_soft_register
};

/* Register values for cdce72010 */
u32 cdce72010_reg[CDCE72010_NUMREG] = {
//internal reference clock. Default config.
	/*0x683C0310,
	0x68000021,
	0x83040002,
	0x68000003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68050CC9,
	0x05FC270A,
	0x0280044B,
	0x0000180C*/

//3.84MHz ext clock. Does not lock.
	/*0x682C0290,
	0x68840041,
	0x83840002,
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000C49,
	0x0BFC02FA,
	0x8000050B,
	0x0000180C*/

//61.44MHz ext clock. LOCK.
	/*0x682C0290,
	0x68840041,
	0x83040002,
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000049,
	0x0024009A,
	0x8000050B,
	0x0000180C*/

//7.68MHz ext clock. Lock.
// Use with Libera RF & clock generator. RF = 291.840MHz, MCf = 7.680MHz, H = 38
// DDS = 3.072MHz -> Phase increment = 2048d
	0x682C0290,
	0x68840041,
	0x83860002,
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000049,
	0x007C003A, // PFD_freq = 1.92MHz
	0x8000050B,
	0x0000180C

//15.36MHz ext clock.
	/*0x682C0290,
	0x68840041,
	0x83840002,
	/*;83020002,;divide by 6
	;83860002,	;divide by 5
	;83800002,	;divide by 2
	;83840002,	;divide by 4
	;83060002,	;divide by 8
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000049,
	0x003C003A,
	0x8000050B,
	0x0000180C*/

//9.6MHz ext clock.
	/*0x682C0290,
	0x68840041,
	0x83860002,//;divide by 5
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000049,
	0x007C004A,
	0x8000050B,
	0x0000180C*/

	//9.250MHz ext clock. No lock
	/*0x682C0290,
	0x68840041,
	0x83860002,
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000049,
	0x5FFC39CA,
	//0x8000390B,	// DIvide by 32
	0x8000050B, //Divide by 8
	0x0000180C*/

	//10.803 (originally 10.803 actually) ext clock.
	//Could it be something related to the lock window? see cdce72010 datasheet
	/*0x682C0290,
	0x68840041,
	0x83840002,
	0x68400003,
	0xE9800004,
	0x68000005,
	0x68000006,
	0x83800017,
	0x68000098,
	0x68000049,
	0x03FC02CA,
	0x8000050B,
	0x0000180C*/
};

/* Lookup for the correct handler to associate */
int get_low_level_handler(unsigned int comm, struct low_level_handler **low_level_handler){
	int error;

	switch(comm){
		/*case FMC150_ADC_DELAY:*/
		case FMC150_CAPTURE:
		case FMC150_GET_SAMPLES:
		case FMC150_READ:
		case FMC150_WRITE:
			*low_level_handler = &fmc150_adc_low_level_handler;
			error = SUCCESS;
			break;

		case DDC_CAPTURE:
		case DDC_GET_SAMPLES:
		/*case DDC_READ:
		case DDC_WRITE:*/
			*low_level_handler = &ddc_low_level_handler;
			error = SUCCESS;
			break;

		/* No handler available or undefined command */
		default:
			error = ERROR;
	}

	return error;
}

/* Delay of 10000*counts clock cycles = 100us for a 100MHz clock*/
void delay(int counts){
	int i;
	for(i = 0; i < counts*10000; i++){
		asm("nop");
	}
}

int update_fmc150_adc_delay(u8 adc_strobe_delay, u8 adc_cha_delay, u8 adc_chb_delay)
{
    u32 aux_value;

    aux_value = (u32)adc_strobe_delay + (((u32)adc_cha_delay) << 8) + (((u32)adc_chb_delay) << 16);

    XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_ADC_DELAY*0x4, aux_value);
    XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_PULSE_0*0x4, 0x1);

    return SUCCESS;
}

int capture_samples(u32 qw_count, struct low_level_handler *low_lev_handler) {

	int error;
	low_lev_handler->samples_count_pos = 0;
	low_lev_handler->samples_count = qw_count;
	/* Workaround. Try to fix this ASAP */
	u32 qw_count_fix = (low_lev_handler->id == ADC_ID) ? qw_count : qw_count-1;

#ifdef LOW_LEV_DEBUG
	xil_printf("capture_samples: samples_count_pos = %d\n", low_lev_handler->samples_count_pos);
	xil_printf("capture_samples: samples_count = %d\n", low_lev_handler->samples_count);
#endif

    //XAxiDma_Reset(&low_lev_handler->attr->AxiDma);

	// Check if DMA has completed its reset
	/*if(XAxiDma_ResetIsDone(&low_lev_handler->attr->AxiDma) == 0){
#ifdef LOW_LEV_DEBUG
	xil_printf("DMA has not completed its reset!\n");
#endif
		return ERROR;
	}

	XAxiDma_IntrEnable(&low_lev_handler->attr->AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);*/

   /* Note the fact that each sample is SAMPLE_SIZE*8-bit (SAMPLE_SIZE bytes) large. Therefore we have (qw_count * SAMPLE_SIZE) bytes */
	xil_printf("mem start_addr = %08X\n", low_lev_handler->attr->mem_start_addr);
  if((error = XAxiDma_SimpleTransfer(&low_lev_handler->attr->AxiDma, (u32 *)dma_buf/*(low_lev_handler->attr->mem_start_addr)*/, qw_count*(low_lev_handler->attr->sample_size), XAXIDMA_DEVICE_TO_DMA)) != XST_SUCCESS){
	  xil_printf("Error transferring data to buffer! Error: %s\n", (error == XST_FAILURE) ? "XST_FAILURE" : "XST_INVALID_PARAM");
	  return ERROR;
  }

  // start the adc capture. 0 -> 1 transition on bit #21
  XIo_Out32(low_lev_handler->baseaddr, 0x00000000);
  delay(100);
  xil_printf("capture_ctl register reg: %08X\n", XIo_In32(low_lev_handler->baseaddr));
  /* Here we have # of SAMPLE_SIZE*8-bit samples (= SAMPLE_SIZE samples) */
  /* Check for the qw_count - 1 !!!!*/
  XIo_Out32(low_lev_handler->baseaddr, (0x00200000 | qw_count_fix));
  delay(100);
  xil_printf("capture_ctl register reg: %08X\n", XIo_In32(low_lev_handler->baseaddr));

  return SUCCESS;
}

/* Should be called after adc_fmc150_capture() */
int get_samples(u32 *size, u32 *byte_offset, struct low_level_handler *low_lev_handler)
{
	int i;
	s32 tmp_size = 1;

#ifdef LOW_LEV_DEBUG
	xil_printf("get_samples: trying to get %d samples...\n", *size);
#endif

	/*XAxiDma_Reset(&low_lev_handler->attr->AxiDma);
	// Check if DMA has completed its reset
	if(XAxiDma_ResetIsDone(&low_lev_handler->attr->AxiDma) == 0){
#ifdef LOW_LEV_DEBUG
	xil_printf("DMA has not completed its reset!\n");
#endif
		return ERROR;
	}*/

	/* Resume DMA transactions if halted */
	/*if ((error = XAxiDma_Resume(&low_lev_handler->attr->AxiDma)) != XST_SUCCESS){
#ifdef LOW_LEV_DEBUG
	xil_printf("DMA has not resumed! Error: %s\n", (error == XST_NOT_SGDMA) ? "XST_NOT_SGDMA" : "XST_DMA_ERROR");
#endif
		return ERROR;
	}
	else{
#ifdef LOW_LEV_DEBUG
	xil_printf("Enabling DMA interrupts\n");
#endif
		Enable DMA interrupts
	    XAxiDma_IntrEnable(&low_lev_handler->attr->AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	}*/

	/* Trying to read more than available in buffer */
	if(low_lev_handler->samples_count_pos + *size > low_lev_handler->samples_count){
		tmp_size = low_lev_handler->samples_count - low_lev_handler->samples_count_pos;
#ifdef LOW_LEV_DEBUG
		xil_printf("get_samples: samples_count_pos = %d\n", low_lev_handler->samples_count_pos);
		xil_printf("get_samples: samples_count = %d\n", low_lev_handler->samples_count);
		xil_printf("get_samples: Size from adc_fmc150_get_samples trimmed to %d\n", tmp_size);
#endif
	}

	/* No more data to read from buffer! Issue a new capture from adc.
	 * Tricky construct*/
	if(tmp_size <= 0 && (tmp_size = *size) && capture_samples(*size, low_lev_handler) < 0){
		xil_printf("Could not acquire samples\n");
		return ERROR;
	}

	/* FIX this! Decouple modules! and improve clarity*/
	*size = (tmp_size > low_lev_handler->attr->max_resp_buffer_packets) ?
			low_lev_handler->attr->max_resp_buffer_packets : tmp_size;

	for(i = 0; i < MAX_DMA_TRIES; ++i){
		if(XAxiDma_Busy(&low_lev_handler->attr->AxiDma, XAXIDMA_DEVICE_TO_DMA) != TRUE){
#ifdef LOW_LEV_DEBUG
	xil_printf("get_samples: DMA has completed!\n");
#endif
			break;

		}

		delay(1000);
	}

	if(i == MAX_DMA_TRIES){
#ifdef LOW_LEV_DEBUG
	xil_printf("get_samples: DMA has failed to deliver data!\n");
#endif
		//XAxiDma_Reset(&low_lev_handler->attr->AxiDma);
		return ERROR;
	}

	*byte_offset = low_lev_handler->samples_count_pos * low_lev_handler->attr->sample_size;
	low_lev_handler->samples_count_pos += *size;

#ifdef LOW_LEV_DEBUG
	xil_printf("get_samples: *byte_offset = %d\n", *byte_offset);
	xil_printf("get_samples: samples_count_pos = %d\n", low_lev_handler->samples_count_pos);
	xil_printf("get_samples: *size = %d\n", *size);
#endif

	return SUCCESS;
}

int read_fmc150_register(u32 chipselect, u32 addr, volatile u32* value)
{
    volatile u32 aux_value;

    if ((XIo_In32(FMC150_BASEADDR+
    		OFFSET_FMC150_FLAGS_OUT_0*0x4) & MASK_AND_FLAGSOUT0_SPI_BUSY) != MASK_AND_FLAGSOUT0_SPI_BUSY)
    {
        aux_value = XIo_In32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_IN_0*0x4);
        XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_IN_0*0x4, aux_value | MASK_OR_FLAGSIN0_SPI_READ);
        XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_ADDR*0x4, addr);

        aux_value = XIo_In32(FMC150_BASEADDR+OFFSET_FMC150_CHIPSELECT*0x4) ^ chipselect;
        XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_CHIPSELECT*0x4, aux_value);

        /* Should test in order to see if this delay could be less than 10 */
        delay(10);

        *value = XIo_In32(FMC150_BASEADDR+OFFSET_FMC150_DATAOUT*0x4);

        return SUCCESS;
    }
    else
        return ERROR;
}

int write_fmc150_register(u32 chipselect, u32 addr, u32 value)
{
    volatile u32 aux_value;

    aux_value = XIo_In32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_IN_0*0x4);
    XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_IN_0*0x4, aux_value & MASK_AND_FLAGSIN0_SPI_WRITE);
    XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_ADDR*0x4, addr);
    XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_DATAIN*0x4, value);

    aux_value = XIo_In32(FMC150_BASEADDR+OFFSET_FMC150_CHIPSELECT*0x4) ^ chipselect;
    XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_CHIPSELECT*0x4, aux_value);

    return SUCCESS;
}

int read_soft_register(u32 baseaddr, u32 offset, volatile u32 *value)
{
	*value = XIo_In32(baseaddr + offset*0x4);
	return SUCCESS;
}

int write_soft_register(u32 baseaddr, u32 offset, u32 value)
{
	XIo_Out32(baseaddr + offset*0x4, value);
	return SUCCESS;
}

int led_read(u32 chipselect, u32 addr, volatile u32* value){
	*value = XIo_In32(LED_BASEADDR);
	return SUCCESS;
}

int led_write(u32 chipselect, u32 addr, u32 value){
	XIo_Out32(LED_BASEADDR, value);
	return SUCCESS;
}

int enable_ext_clk(){
	u32 aux_value;

	// set External Clock for FMC150
	aux_value = XIo_In32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_IN_0*0x4);
#ifdef LOW_LEV_DEBUG
	xil_printf("flags in value = %08X\n", aux_value);
#endif
	XIo_Out32(FMC150_BASEADDR+OFFSET_FMC150_FLAGS_IN_0*0x4, aux_value | 0x02);
#ifdef LOW_LEV_DEBUG
	xil_printf("flags in value = %08X\n", XIo_In32(FMC150_BASEADDR + OFFSET_FMC150_FLAGS_IN_0*0x4));
	xil_printf("flags out value = %08X\n", XIo_In32(FMC150_BASEADDR + OFFSET_FMC150_FLAGS_OUT_0*0x4));
#endif

	// 200ms delay. It is needed 50ms for EEPROM to configure cdce72010
	delay(200);

	return SUCCESS;
}

int init_cdce72010()
{
	int i;
	volatile u32 value;

	/* Write regs to cdce72010 statically */
	for(i = 0; i < CDCE72010_NUMREG; ++i){
		while(read_fmc150_register(CHIPSELECT_CDCE72010, i, &value) < 0){
			xil_printf("cdce72010 SPI busy\n");
			delay(1000);
		}
#ifdef LOW_LEV_DEBUG
		xil_printf("init_cdce72010: cdce72010 reg %2X before write: %08X\n", i, value);
		xil_printf("init_cdce72010: cdce72010 mem pos %d: %08X\n", i, cdce72010_reg[i]);
#endif

		write_fmc150_register(CHIPSELECT_CDCE72010, i, cdce72010_reg[i]);
		delay(10);
		/* Do a write-read cycle in order to ensure that we wrote the correct value */
	    while(read_fmc150_register(CHIPSELECT_CDCE72010, i, &value) < 0){
	    	xil_printf("cdce72010 SPI busy\n");
	    	delay(100);
	    }
#ifdef LOW_LEV_DEBUG
	    xil_printf("init_cdce72010: cdce72010 reg %2X after write: %08X\n", i, value);
#endif
	}

	return SUCCESS;
}

int init_ads62p49()
{
	volatile u32 value;

	/* Read register # 2 from cdce 72010 */
	while(read_fmc150_register(CHIPSELECT_CDCE72010, 0x2, &value) < 0){
		xil_printf("init_ads62p49: cdce72010 SPI busy\n");
		delay(100);
	}

	/* extract only the output divider part */
	value = ((value & CDCE72010_OUTPUT_DIV_MASK) >> CDCE72010_OUTPUT_DIV_SHIFT);

	switch(value){

		case 0x20:	//divide by 1. ADC_freq = 491.52MHz
		case 0x40:	//divide by 2. ADC_freq = 245.76MHz
		case 0x41:	//divide by 3. ADC_freq = 163.84MHz
		case 0x42:	//divide by 4. ADC_freq = 122.88MHz
		case 0x43:	//divide by 5. ADC_freq = 98.304MHz
		case 0x00:	//divide by 4'. ADC_freq = 122.88MHz
		case 0x01:  //divide by 6. ADC_freq = 81.92MHz
			/* Disable low speed mode. > 80MSPS */
			write_fmc150_register(CHIPSELECT_ADS62P49, 0x020, 0x00);
			break;

		/* Divide by greater than 6. ADC_freq <= 61.44 */
		default:
			/* Enable low speed mode. < 80MSPS */
			write_fmc150_register(CHIPSELECT_ADS62P49, 0x020, 0x04);
	}

    while(read_fmc150_register(CHIPSELECT_ADS62P49, 0x020, &value) < 0){
    	xil_printf("init_ads62p49: ads62p49 SPI busy\n");
    	delay(100);
    }

	xil_printf("init_ads62p49: ads62p49 reg 0x020  = %08X\n", value);

	return SUCCESS;
}

int init_fmc150_delay()
{
	u8 adc_strobe_delay = 0, adc_cha_delay, adc_chb_delay;
	volatile u32 value;

	/* Read register # 2 from cdce 72010 */
	while(read_fmc150_register(CHIPSELECT_CDCE72010, 0x2, &value) < 0){
		xil_printf("init_fmc150_delay: cdce72010 SPI busy\n");
		delay(100);
	}

	/* extract only the output divider part */
	value = ((value & CDCE72010_OUTPUT_DIV_MASK) >> CDCE72010_OUTPUT_DIV_SHIFT);

	switch(value){

		case 0x20:	//divide by 1. ADC_freq = 491.52MHz
		case 0x40:	//divide by 2. ADC_freq = 245.76MHz
		case 0x41:	//divide by 3. ADC_freq = 163.84MHz
		//Possibly different values for delay
		case 0x42:	//divide by 4. ADC_freq = 122.88MHz
		case 0x00:	//divide by 4'. ADC_freq = 122.88MHz
			adc_cha_delay = adc_chb_delay = 0x11;
			break;
		case 0x43:	//divide by 5. ADC_freq = 98.304MHz
			adc_cha_delay = adc_chb_delay = 0x16;
			break;
		case 0x01:  //divide by 6. ADC_freq = 81.92MHz
			adc_cha_delay = adc_chb_delay = 0x06;
			break;

		/* Divide by greater than 6. ADC_freq <= 61.44 */
		default:
			adc_cha_delay = adc_chb_delay = 0x05;
	}

	if(update_fmc150_adc_delay(adc_strobe_delay, adc_cha_delay, adc_chb_delay) < 0){
		xil_printf("init_fmc150_delay: Error updating adc_delay!\n");
		return ERROR;
	}

	xil_printf("init_fmc150_delay: \nChannel A delay updated to 0x%02X\nChannel B delay updated to 0x%02X\n",
			adc_cha_delay, adc_chb_delay);

	return SUCCESS;
}

int check_ext_lock()
{
	int i;
	volatile u32 value = 0;

	for(i = 0; i < MAX_PLL_LOCK_TRIES; i++){
		delay(10);
		while(read_fmc150_register(CHIPSELECT_CDCE72010, 0xC, &value) < 0){
			xil_printf("cdce72010 SPI busy\n");
			delay(100);
		}
		xil_printf("cdce72010 reg 0xC: %08X\n", value);

		if((value & CDCE72010_PLL_LOCK)){
			return SUCCESS;
		}

		xil_printf("cdce72010 PLL NOT locked\n");
		delay(1000);
	}

	return ERROR;
}

int check_mmcm_lock()
{
	int i;

	for(i = 0; i < MAX_MMCM_LOCK_TRIES /*&& mmcm_clock_lock == 0*/; i++){
		xil_printf("fmc150_flags_out: %08X\n", XIo_In32(FMC150_BASEADDR + OFFSET_FMC150_FLAGS_OUT_0*0x4));
		if((XIo_In32(FMC150_BASEADDR + OFFSET_FMC150_FLAGS_OUT_0*0x4) &
				MASK_AND_FLAGS_OUT_0_FPGA_ADC_CLK_LOCKED)){
			return SUCCESS;
		}
		xil_printf("MMCM NOT locked\n");
		delay(100);
	}

	return ERROR;
}

int dump_cdce72010_regs()
{
	int i;
	volatile u32 value;

	xil_printf("--------------------------\n");
	xil_printf("cdce72010 regs:\n");
	delay(100);
	for(i = 0; i < CDCE72010_NUMREG; ++i){
		while(read_fmc150_register(CHIPSELECT_CDCE72010, i, &value) < 0){
			xil_printf("cdce72010 SPI busy\n");
			// 100ms delay
			delay(100);
		}

		xil_printf("cdce72010 reg 0x%02X: 0x%08X\n", i, value);
	}
	xil_printf("--------------------------\n");

	return SUCCESS;
}

int calibrate_adc_delay()
{
	int i;

	for(i = 0; i < 32; ++i){
		xil_printf("updating delay to %02X\n", i);
		if(update_fmc150_adc_delay(0x00, i, i) < 0){
			xil_printf("Error updating adc_delay!\n");
			return -1;
		}

		delay(2000);
	}

	return SUCCESS;
}

int dump_mem_adc(void *mem_start_addr, int mem_size)
{
	int i;

	xil_printf("------------------------\nmem start addr = %08X, mem size = %08X\n", mem_start_addr, mem_size);

	for(i = 0; i < mem_size/ADC_SAMPLE_SIZE; ++i){
		xil_printf("%d\t%d\n",
				*((short int *)((char *)mem_start_addr+i*ADC_SAMPLE_SIZE)),
				*((short int *)((char *)mem_start_addr+i*ADC_SAMPLE_SIZE+2)));
	}

	xil_printf("------------------------\n");


	return SUCCESS;
}
